// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test} from "forge-std/Test.sol";
import {OrderExecutor} from "../../src/OrderExecutor.sol";
import {SignedOrder} from "../../src/interfaces/IOrderHandler.sol";

contract Debug is Test {
    // the identifiers of the forks
    uint256 optimismFork;

    //Access variables from .env file via vm.envString("varname")
    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need
    //inside your .env file e.g:
    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'
    //string MAINNET_RPC_URL = vm.envString("MAINNET_RPC_URL");
    string OPTIMISM_RPC_URL = "https://arb-sepolia.g.alchemy.com/v2/9_jNoFjyjPjvyDxHU2Ud5dww00iJxThm";

    // create two _different_ forks during setup
    function setUp() public virtual {
        optimismFork = vm.createFork(OPTIMISM_RPC_URL);
        vm.selectFork(optimismFork);
        vm.rollFork(142447292);
        // vm.chainId(10);
    }

    /*
    function testQuoter() public {
        OrderExecutor executor = OrderExecutor(address(0x06145CfE8bCEE920088bfe240817b6C9473C9cf3));

        executor.execute(
            SignedOrder({
                appSig: bytes(""),
                dispatcher: 0x924bA7abe027f00e59b551C49Aea25B98fc2E4d1,
                methodId: 1,
                order: hex'0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000924ba7abe027f00e59b551c49aea25b98fc2e4d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a6069fd8b183410d32b84ca72307b536339d16cc0000000000000000000000000000000000000000000000000000000067fc9ddb924ba7abe027f00e59b551c49aea25b98fc2e4d100004ee00000000000000000000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000009546573744d795379750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454535955000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                identifier: bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
                signature: hex'0000000000FF00dfc5dd9ba42284dfd794ecc2eec80a69091fd788ebb52837932e500dbb5596ad35464c95d003fa7543bc8d66817215b41afb0a6a7051e1724187448cb0beb80c1c'
            }),
            hex''
        );
    }
    */
}
