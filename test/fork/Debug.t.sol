// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test} from "forge-std/Test.sol";
import {OrderExecutor} from "../../src/OrderExecutor.sol";
import {SignedOrder} from "../../src/interfaces/IOrderHandler.sol";

contract Debug is Test {
    // the identifiers of the forks
    uint256 optimismFork;

    //Access variables from .env file via vm.envString("varname")
    //Replace ALCHEMY_KEY by your alchemy key or Etherscan key, change RPC url if need
    //inside your .env file e.g:
    //MAINNET_RPC_URL = 'https://eth-mainnet.g.alchemy.com/v2/ALCHEMY_KEY'
    //string MAINNET_RPC_URL = vm.envString("MAINNET_RPC_URL");
    string OPTIMISM_RPC_URL = "https://arb-sepolia.g.alchemy.com/v2/9_jNoFjyjPjvyDxHU2Ud5dww00iJxThm";

    // create two _different_ forks during setup
    function setUp() public virtual {
        optimismFork = vm.createFork(OPTIMISM_RPC_URL);
        vm.selectFork(optimismFork);
        vm.rollFork(142795370);
        // vm.chainId(10);
    }

    function testQuoter() public {
        OrderExecutor executor = OrderExecutor(address(0x06145CfE8bCEE920088bfe240817b6C9473C9cf3));

        executor.execute(
            SignedOrder({
                appSig: bytes(""),
                dispatcher: 0x64ceaDd1126ee5CB19F9f37261e51c3713111963,
                methodId: 1,
                order: hex'000000000000000000000000000000000000000000000000000000000000002000000000000000000000000064ceadd1126ee5cb19f9f37261e51c37131119630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a6069fd8b183410d32b84ca72307b536339d16cc0000000000000000000000000000000000000000000000000000000067fdf2d064ceadd1126ee5cb19f9f37261e51c371311196300004ee10000000000000000000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000009546573744d795379750000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000454535955000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                identifier: bytes32(0x0000000000000000000000000000000000000000000000000000000000000000),
                signature: hex'0000000000FF00ded97503f76f5848f1dde65229a133f3a726e89406fad6ec6eaef2e1df458754499653e739e1124d2a14043de6739a4f5836200504142aaed6daea09eaaa511e1c'
            }),
            hex''
        );
    }
}
